#include <vector>
#include <iostream>
using namespace std;

class Object{
public:
    virtual void response() = 0;

    virtual ~Object() = default;
};

class IceMonster : public Object{
	void response() override {
	    cout << " fire attack" << endl;
	}
};

class FireMonster : public Object{
	void response() override {
	    cout << " ice attack" << endl;
	}
};

class Treasure : public Object{
	void response() override {
	    cout << " ya" << endl;
	}
};


class Room{
public:
    Room *up_room;
    Room *down_room;
    Room *left_room;
    Room *right_room;
    int index;
    Object *o;

    Room(int idx = -1) :
        index(idx),
        up_room(nullptr),
        down_room(nullptr),
        left_room(nullptr),
        right_room(nullptr),
        o(nullptr) {
    }

    void setRoom(char roomType, Room* up, Room* down, Room* left, Room* right) {
        up_room = up;
        down_room = down;
        left_room = left;
        right_room = right;

        switch(roomType) {
            case 'e':
                o = nullptr;
                break;
            case 'i':
                o = new IceMonster;
                break;
            case 'f':
                o = new FireMonster;
                break;
            case 't':
                o = new Treasure;
                break;
        }
    }

    ~Room() {
        delete o;
    }
};

void visit(Room* r) {
    if(r == nullptr) {
        cout << -1 << endl;
        return;
    }

    cout << r->index;

    if(r->o == nullptr) {
        cout << endl;
    } else {
        r->o->response();
    }

    delete r->o;
    r->o = nullptr;
}

int main() {
    int roomCount, moveCount;
    cin >> roomCount >> moveCount;

    vector<Room*> rooms(roomCount + 1);
    rooms[0] = nullptr;
    for(int i = 1; i <= roomCount; i++) {
        rooms[i] = new Room(i - 1);
    }

    char type, move;
    int up, down, left, right;

    for(int i = 1; i <= roomCount; i++) {
        cin >> type >> up >> down >> left >> right;
        rooms[i]->setRoom(type, rooms[up + 1], rooms[down + 1], rooms[left + 1], rooms[right + 1]);
    }

    Room* curr = rooms[1];
    visit(curr);
    for(int i = 0; i < moveCount; i++) {
        cin >> move;
        switch(move) {
            case 'u':
                visit(curr->up_room);
                if(curr->up_room) curr = curr->up_room;
                break;
            case 'd':
                visit(curr->down_room);
                if(curr->down_room) curr = curr->down_room;
                break;
            case 'l':
                visit(curr->left_room);
                if(curr->left_room) curr = curr->left_room;
                break;
            case 'r':
                visit(curr->right_room);
                if(curr->right_room) curr = curr->right_room;
                break;
        }
    }

    return 0;
}